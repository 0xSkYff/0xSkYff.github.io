<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[MyStuff]]></title><description><![CDATA[Obsidian digital garden]]></description><link>http://github.com/dylang/node-rss</link><image><url>lib\media\favicon.png</url><title>MyStuff</title><link></link></image><generator>Webpage HTML Export plugin for Obsidian</generator><lastBuildDate>Mon, 07 Apr 2025 21:10:34 GMT</lastBuildDate><atom:link href="lib\rss.xml" rel="self" type="application/rss+xml"/><pubDate>Mon, 07 Apr 2025 21:10:32 GMT</pubDate><ttl>60</ttl><dc:creator></dc:creator><item><title><![CDATA[Commit hash]]></title><description><![CDATA[ 
 <br>Everything in Git is checksummed before it is stored and is then referred to by that checksum, hence each commit has commit hash. <br>The mechanism that Git uses for this checksumming is called a SHA-1 hash. This is a 40-character string composed of hexadecimal characters and calculated based on the contents of a file or directory structure in Git.<br>You can refer to any commit by using the first 7 characters of its hash.<br>git log 1234abc
<br><br>Git documentation<br>
<a rel="noopener nofollow" class="external-link" href="https://git-scm.com/book/ms/v2/Getting-Started-What-is-Git%3F#_git_has_integrity" target="_blank">https://git-scm.com/book/ms/v2/Getting-Started-What-is-Git%3F#_git_has_integrity</a>]]></description><link>git\basics\commits\commit-hash.html</link><guid isPermaLink="false">Git/Basics/Commits/Commit hash.md</guid><pubDate>Mon, 07 Apr 2025 21:02:36 GMT</pubDate></item><item><title><![CDATA[git commit]]></title><description><![CDATA[ 
 <br>GIT allows you to track code changes over time by author with a set of commands to search, manipulate and revert history.<br>A commit it is  a snapshot of the repository at a given point. It is a way to save the state of the repository.  It comes with the author, time of day, a message about the changes you were done, etc.<br>git commit -m "A message about the changes."
]]></description><link>git\basics\commits\git-commit.html</link><guid isPermaLink="false">Git/Basics/Commits/git commit.md</guid><pubDate>Mon, 07 Apr 2025 21:02:36 GMT</pubDate></item><item><title><![CDATA[git log]]></title><description><![CDATA[ 
 <br>A git repository is a list of <a data-tooltip-position="top" aria-label="git commit" data-href="git commit" href="git\basics\commits\git-commit.html" class="internal-link" target="_self" rel="noopener nofollow">commits</a>, where each commit represents the full state of the repository at a given point in time.<br>The git log command shows a history of commits in a repository.<br>
It shows who made the commit, when the commit was made, what was changed and the commit hash.<br>git log
<br>You can see just the last commit and its description<br>git log --oneline
<br>The last ten commits.<br>git log -n 10
]]></description><link>git\basics\commits\git-log.html</link><guid isPermaLink="false">Git/Basics/Commits/git log.md</guid><pubDate>Mon, 07 Apr 2025 21:02:36 GMT</pubDate></item><item><title><![CDATA[git cat-file]]></title><description><![CDATA[ 
 <br>Provide contents or details of repository objects.<br>To read the content ( or blob ) of a git object<br>git cat-file -p &lt;SHA1&gt;
<br>You can also read its type <br>git cat-file -t &lt;SHA1&gt;
<br><br>Stack overflow question<br><a rel="noopener nofollow" class="external-link" href="https://stackoverflow.com/questions/38177026/what-does-cat-file-stand-for-in-git" target="_blank">https://stackoverflow.com/questions/38177026/what-does-cat-file-stand-for-in-git</a><br>Git reference<br><a rel="noopener nofollow" class="external-link" href="https://git-scm.com/docs/git-cat-file" target="_blank">https://git-scm.com/docs/git-cat-file</a>]]></description><link>git\basics\objects\git-cat-file.html</link><guid isPermaLink="false">Git/Basics/Objects/git cat-file.md</guid><pubDate>Mon, 07 Apr 2025 21:02:36 GMT</pubDate></item><item><title><![CDATA[git objects]]></title><description><![CDATA[ 
 <br>Git is made up of objects that are stored in the .git/objects directory. For instance, a commit is just a type of object.<br>
Git stores the commits in directories named with the first 2 characters of the hash to prevent inode busting. If git would't do that you could ended up having too many files in the the same directory which turns to run out of inodes. If you try to cat a git object you will realize that it is illegible because git compresses  things. That's why git is so small.<br>Technologies such as CDN do also this kind of stuff.]]></description><link>git\basics\objects\git-objects.html</link><guid isPermaLink="false">Git/Basics/Objects/git objects.md</guid><pubDate>Mon, 07 Apr 2025 21:02:36 GMT</pubDate></item><item><title><![CDATA[Trees vs Blobs]]></title><description><![CDATA[ 
 ]]></description><link>git\basics\objects\trees-vs-blobs.html</link><guid isPermaLink="false">Git/Basics/Objects/Trees vs Blobs.md</guid><pubDate>Mon, 07 Apr 2025 21:00:04 GMT</pubDate></item><item><title><![CDATA[Git config]]></title><description><![CDATA[ 
 <br>It is a command used to set different configurations either on a global or local environment.<br>
The configuration file is .gitconfig <br><br>By default, git will write to the local if no configuration option is passed.<br>git config user.name "user"
# fatal: not in a git directory
<br>This error will be prompted if you are not within a directory revised by git.<br>
<br>--local Local levels are applied to the context a git repository .git/config
<br>--global It is user specific it is stored in ~/.gitconfig
<br>--system It is applied across an entire machine (all users), /etc/gitconfig
<br><br>If you don't pass it a value such as an username or an email it will just print the configuration value, to set it you have to add it.<br>git config --global user.name # list name
git config --global user.email  # list email

git config --global user.name "user" # set user
git config --global user.email "email@email" # set email
<br><br>Many Git commands will launch a text editor to prompt for further input.<br>
Git will look up at core.editor<br>git config --global core.editor "vim"
<br><br>You can override the default branch name e.g. when initializing a new repository.<br>git config --global init.defaultBranch nameBranch
<br>See also <a data-href="Branching" href="git\branching.html" class="internal-link" target="_self" rel="noopener nofollow">Branching</a>]]></description><link>git\basics\git-config.html</link><guid isPermaLink="false">Git/Basics/Git config.md</guid><pubDate>Mon, 07 Apr 2025 21:02:36 GMT</pubDate></item><item><title><![CDATA[git init]]></title><description><![CDATA[ 
 <br>The very first step of every project is to create a repository. Normally a project only have one repo, unless you have some forks for the project.<br>In essence, a repository is just a directory that contains the project files and a special hidden folder, .git where all of the internal tracking and versioning info takes place.<br>git init
]]></description><link>git\basics\git-init.html</link><guid isPermaLink="false">Git/Basics/git init.md</guid><pubDate>Mon, 07 Apr 2025 21:02:36 GMT</pubDate></item><item><title><![CDATA[States]]></title><description><![CDATA[ 
 <br>A file within a git repository can be in one of the 4 states.<br>
<br>Untracked  Git does not know anything about that file. It has never been added to the index. The index is just the changes you have staged onto your system.
<br>Modified The file is changed, but not commited.
<br>Staged  It marks a modified file in its current version to go into your next commit snapshot.  git add file  in order to add to the stage a file or files.
<br>Commited The data is safely stored in your local database
<br>Git status shows you the current state of your repository. It can be used to obtain a summary of which files have changes that are staged for the next commit or even untracked files.<br>git status
<br><br>Git documentation<br>
<a rel="noopener nofollow" class="external-link" href="https://git-scm.com/book/ms/v2/Getting-Started-What-is-Git%3F#_the_three_states" target="_blank">https://git-scm.com/book/ms/v2/Getting-Started-What-is-Git%3F#_the_three_states</a>]]></description><link>git\basics\states.html</link><guid isPermaLink="false">Git/Basics/States.md</guid><pubDate>Mon, 07 Apr 2025 21:02:36 GMT</pubDate></item><item><title><![CDATA[What is git]]></title><description><![CDATA[ 
 <br>Git it is a version control system, (VCS). It is a system that records changes to a file or a set of files over time so you can recall specific versions later. You can revert a file or the entire project  to a previous state, compare changes of previous versions or even see who last modified something.<br>Git thinks of its data more like a series of snapshots of a miniature file system. With Git, every time you <a data-href="git commit" href="git\basics\commits\git-commit.html" class="internal-link" target="_self" rel="noopener nofollow">git commit</a>, or save the state of your project, Git basically takes a picture of what all your files look like at that moment and stores a reference to that snapshot. To be efficient, if files have not changed, Git doesn’t store the file again, just a link to the previous identical file it has already stored. Git thinks about its data more like a stream of snapshots.<br>Most operations in Git need only local files and resources to operate. Most of the time no information is needed from another computer on your network.<br>You have the the entire history of the project stored in your local disk.<br>For example, to browse the history of the project, Git doesn’t need to go out to the server to get the history and display it for you it simply reads it directly from your local database.<br>Everything in Git is checksummed before it is stored and is then referred to by that checksum. This means it’s impossible to change the contents of any file or directory without Git knowing about it.<br><br>Git documentation<br>
<a rel="noopener nofollow" class="external-link" href="https://git-scm.com/book/ms/v2/Getting-Started-About-Version-Control" target="_blank">https://git-scm.com/book/ms/v2/Getting-Started-About-Version-Control</a><br>Wikipedia<br>
<a rel="noopener nofollow" class="external-link" href="https://en.wikipedia.org/wiki/Version_control" target="_blank">https://en.wikipedia.org/wiki/Version_control</a>]]></description><link>git\basics\what-is-git.html</link><guid isPermaLink="false">Git/Basics/What is git.md</guid><pubDate>Mon, 07 Apr 2025 21:02:36 GMT</pubDate></item><item><title><![CDATA[Branching]]></title><description><![CDATA[ 
 ]]></description><link>git\branching.html</link><guid isPermaLink="false">Git/Branching.md</guid><pubDate>Mon, 07 Apr 2025 21:00:04 GMT</pubDate></item></channel></rss>